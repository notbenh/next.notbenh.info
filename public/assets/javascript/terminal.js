// Generated by CoffeeScript 1.6.3
var Action, ActionSet, Terminal,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

ActionSet = (function() {
  function ActionSet(name, actions) {
    var data;
    this.name = name;
    this.help = __bind(this.help, this);
    this._merge = __bind(this._merge, this);
    this.rm = __bind(this.rm, this);
    this["do"] = __bind(this["do"], this);
    if (actions !== void 0) {
      for (name in actions) {
        data = actions[name];
        this.add.apply(this, [name].concat(__slice.call(data)));
      }
    }
  }

  ActionSet.prototype.actions = {};

  ActionSet.prototype["do"] = function() {
    var args, verb;
    args = arguments.length === 1 ? arguments[0].split(' ') : Array.prototype.slice.call(arguments);
    verb = args.shift();
    if (arguments.length === 1) {
      args = args.join(' ');
    }
    if (this.actions[verb] === void 0) {
      throw "ActionSet " + this.name + " does not know how to " + verb;
    }
    return this.actions[verb].action(args);
  };

  ActionSet.prototype.add = function() {
    var name, opts;
    name = arguments[0], opts = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.actions[name] = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Action, [name].concat(__slice.call(opts)), function(){});
  };

  ActionSet.prototype._custom_actions = [];

  ActionSet.prototype.rm = function() {};

  ActionSet.prototype._merge = function() {};

  ActionSet.prototype.help = function(verb) {
    var action, buffer, content, content_item, name, title, _i, _len, _ref, _ref1;
    buffer = '';
    if (verb === void 0) {
      buffer += "here are a all the known actions: \n";
      _ref = this.actions;
      for (name in _ref) {
        action = _ref[name];
        if (action.note.length > 0) {
          buffer += "  " + action.name + ": " + action.note + "\n";
        }
      }
      return buffer;
    }
    action = this.actions[verb];
    if (action.note.length > 0 || action.docs) {
      buffer += "" + action.name + ":\n";
      if (action.note.length >= 0) {
        buffer += "  " + action.note + "\n";
      }
      _ref1 = action.docs;
      for (title in _ref1) {
        content = _ref1[title];
        if (Array.isArray(content)) {
          buffer += "  " + title + ":\n";
          for (_i = 0, _len = content.length; _i < _len; _i++) {
            content_item = content[_i];
            buffer += "    " + content_item + "\n";
          }
        } else {
          buffer += "  " + title + ": " + content + "\n";
        }
      }
      return buffer;
    }
  };

  return ActionSet;

})();

Action = (function() {
  function Action(name, action, note, docs) {
    this.name = name;
    this.action = action;
    this.note = note != null ? note : '';
    this.docs = docs != null ? docs : {};
  }

  return Action;

})();

Terminal = (function() {
  function Terminal(id, options, actions) {
    this.id = id;
    this.options = options;
    this._preform_action = __bind(this._preform_action, this);
    this.element = $(this.id).terminal(this._preform_action, this.options);
    this.actions = actions !== void 0 ? new ActionSet('instance', actions) : new ActionSet('instance');
  }

  Terminal.prototype._preform_action = function(command, term) {
    var e, match, _ref;
    if (command === '') {
      term.echo('');
    } else if (/^help/.test(command)) {
      match = /^help\s*(\w+)?/.exec(command);
      term.echo(this.actions.help(match[1]));
    } else {
      try {
        term.echo((_ref = this.actions["do"](command)) != null ? _ref : '');
      } catch (_error) {
        e = _error;
        term.error(e != null ? e : 'oops');
      }
    }
  };

  Terminal.prototype._add_action = function(name, action, note, docs) {
    var data, _ref, _results;
    if (typeof name === 'object') {
      _results = [];
      for (name in name) {
        data = name[name];
        _results.push((_ref = this.actions).add.apply(_ref, [name].concat(__slice.call(data))));
      }
      return _results;
    } else {
      return this.actions.add(name, action, note, docs);
    }
  };

  return Terminal;

})();
