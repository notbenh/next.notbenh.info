// Generated by CoffeeScript 1.6.3
var Action, ActionSet, Terminal,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

ActionSet = (function() {
  function ActionSet(name) {
    this.name = name;
    this["do"] = __bind(this["do"], this);
  }

  ActionSet.prototype.actions = {};

  ActionSet.prototype["do"] = function() {
    var args, verb;
    args = arguments.length === 1 ? arguments[0].split(' ') : Array.prototype.slice.call(arguments);
    verb = args.shift();
    if (arguments.length === 1) {
      args = args.join(' ');
    }
    if (this.actions[verb] === void 0) {
      throw "ActionSet " + this.name + " does not know how to " + verb;
    }
    return this.actions[verb].action(args);
  };

  ActionSet.prototype.add = function() {
    var name, opts;
    name = arguments[0], opts = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.actions[name] = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Action, [name].concat(__slice.call(opts)), function(){});
  };

  return ActionSet;

})();

Action = (function() {
  function Action() {
    var action, docs, name, note;
    name = arguments[0], action = arguments[1], note = arguments[2], docs = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    this.name = name;
    this.action = action;
    this.note = note;
    this.docs = docs;
  }

  return Action;

})();

Terminal = (function() {
  function Terminal(id, options) {
    this.id = id;
    this.options = options;
    this._preform_action = __bind(this._preform_action, this);
    this.element = $(this.id).terminal(this._preform_action, this.options);
  }

  Terminal.prototype._preform_action = function(command, term) {
    var e, _ref;
    if (command === '') {
      term.echo('');
    } else {
      try {
        term.echo((_ref = this.actions["do"](command)) != null ? _ref : '');
      } catch (_error) {
        e = _error;
        term.error(e != null ? e : 'oops');
      }
    }
  };

  Terminal.prototype.docs = {};

  Terminal.prototype.actions = new ActionSet('instance');

  Terminal.prototype._add_action = function() {
    var action, docs, name;
    name = arguments[0], action = arguments[1], docs = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return this.actions.add(name, action, docs);
  };

  return Terminal;

})();

/*

    function help (verbs){
  var buffer = ''
  if(verbs.length === 0){
    buffer += "for more help on any topic ask for help followed by topic. for example if you wanted to know more about 'roll' then say 'help roll'\n";
    buffer += "here are some of the helpful things you can do: \n"
    Object.keys(docs).sort().forEach(function(verb){
      buffer += "  " + verb + " : " + docs[verb]['GOAL'] + "\n"
    })
    // TODO: it would be nice if this was formated such that all the : are aligned
  }
  else {
    verbs.forEach(function(verb){
      //console.info('VERB IS ' + verb)
      if( docs[verb] !== undefined ) {
        //console.info('FOUND ONE: ', docs[verb]);
        buffer += "  " + verb + " : " + docs[verb]['GOAL'] + "\n"
        // SYNTAX
        if( docs[verb]['SYNTAX'] !== undefined) {
          buffer += "  SYNTAX: " + docs[verb]['SYNTAX'] + "\n"
        }
        // EXAMPLES
        if( docs[verb]['EXAMPLES'] !== undefined){
          buffer += "  EXAMPLES:\n"
          docs[verb]['EXAMPLES'].forEach(function(example){
            buffer += '    ' + example + "\n"
          })
        }
        // NOTE
        if( docs[verb]['NOTE'] !== undefined) {
          buffer += "  NOTE: " + docs[verb]['NOTE'] + "\n"
        }
        // TODO
        if( docs[verb]['TODO'] !== undefined) {
          buffer += "  TODO: " + docs[verb]['TODO'] + "\n"
        }
      }
      else{
        buffer += "  ERROR: I do not know how to " + verb
      }
    })
  }
  return buffer;
}
*/


/*
        console.info(verb,args,@actions[verb],result)
        if result != undefined
          result_url_match = /https?:\/\/(?:(?!&[^;]+;)[^\s:"'<>)])+/g.exec(result)
          if result_url_match != null && result_url_match[0] == result
            # action returned just a URL, kick open a new tab
            window.open(result)
            result += ' [opened in new tab]'
*/

